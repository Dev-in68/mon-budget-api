# ==============================================
# SCRIPT DEPLOIEMENT PRODUCTION AVANCE
# Mon Budget API - Version Production Complete
# ==============================================

param(
    [switch]$FirstDeploy,
    [switch]$GenerateSecrets,
    [switch]$BackupFirst
)

Write-Host "DEPLOIEMENT PRODUCTION AVANCE" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host ""

# Fonction de log avec timestamp
function Write-Log {
    param($Message, $Color = "White", $NoNewLine = $false)
    $timestamp = Get-Date -Format "HH:mm:ss"
    if ($NoNewLine) {
        Write-Host "[$timestamp] $Message" -ForegroundColor $Color -NoNewline
    } else {
        Write-Host "[$timestamp] $Message" -ForegroundColor $Color
    }
}

# G√©n√©ration des secrets s√©curis√©s
if ($GenerateSecrets -or $FirstDeploy) {
    Write-Log "üîê G√©n√©ration des secrets s√©curis√©s..." "Yellow"
    
    # Chargement de l'assembly pour g√©n√©rer des mots de passe s√©curis√©s
    Add-Type -AssemblyName System.Web
    
    $jwtSecret = [System.Web.Security.Membership]::GeneratePassword(64, 16)
    $jwtRefreshSecret = [System.Web.Security.Membership]::GeneratePassword(64, 16)
    $mysqlPassword = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    $mysqlRootPassword = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    
    Write-Log "‚úÖ Secrets g√©n√©r√©s" "Green"
    Write-Log "‚ö†Ô∏è  Sauvegardez ces valeurs en lieu s√ªr!" "Yellow"
    Write-Host ""
    Write-Host "JWT_SECRET=$jwtSecret" -ForegroundColor Gray
    Write-Host "JWT_REFRESH_SECRET=$jwtRefreshSecret" -ForegroundColor Gray
    Write-Host "MYSQL_PASSWORD=$mysqlPassword" -ForegroundColor Gray
    Write-Host "MYSQL_ROOT_PASSWORD=$mysqlRootPassword" -ForegroundColor Gray
    Write-Host ""
}

# V√©rifications pr√©alables
Write-Log "üîç V√©rification des pr√©requis..." "Yellow"

# Docker
try {
    $dockerVersion = docker --version 2>$null
    Write-Log "‚úÖ Docker: $dockerVersion" "Green"
} catch {
    Write-Log "‚ùå Docker non disponible" "Red"
    exit 1
}

# Docker Compose
try {
    $composeVersion = docker-compose --version 2>$null
    Write-Log "‚úÖ Docker Compose: $composeVersion" "Green"
} catch {
    Write-Log "‚ùå Docker Compose non disponible" "Red"
    exit 1
}

# Fichiers requis
$requiredFiles = @(
    "docker-compose.prod.yml",
    "Dockerfile.prod",
    ".env.production"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Log "‚úÖ $file" "Green"
    } else {
        Write-Log "‚ùå $file manquant" "Red"
        exit 1
    }
}

# Backup avant d√©ploiement
if ($BackupFirst) {
    Write-Log "üíæ Backup des donn√©es existantes..." "Yellow"
    try {
        docker-compose -f docker-compose.prod.yml --profile backup run --rm backup
        Write-Log "‚úÖ Backup termin√©" "Green"
    } catch {
        Write-Log "‚ö†Ô∏è  Aucune donn√©e √† sauvegarder (normal pour premier d√©ploiement)" "Yellow"
    }
}

# Arr√™t des services existants
Write-Log "üõë Arr√™t des services existants..." "Yellow"
try {
    docker-compose -f docker-compose.prod.yml down --remove-orphans
    Write-Log "‚úÖ Services arr√™t√©s" "Green"
} catch {
    Write-Log "‚ö†Ô∏è  Aucun service √† arr√™ter" "Yellow"
}

# Construction des images
Write-Log "üî® Construction de l'image production..." "Yellow"
try {
    docker-compose -f docker-compose.prod.yml build --no-cache app
    Write-Log "‚úÖ Image construite" "Green"
} catch {
    Write-Log "‚ùå Erreur lors de la construction" "Red"
    exit 1
}

# D√©marrage des services
Write-Log "üöÄ D√©marrage des services production..." "Yellow"
try {
    docker-compose -f docker-compose.prod.yml up -d db
    Write-Log "‚úÖ Base de donn√©es d√©marr√©e" "Green"
    
    # Attendre que MySQL soit pr√™t
    Write-Log "‚è≥ Attente de MySQL..." "Yellow"
    $maxWait = 60
    $waited = 0
    
    do {
        Start-Sleep -Seconds 2
        $waited += 2
        try {
            $healthCheck = docker-compose -f docker-compose.prod.yml exec -T db mysqladmin ping -h localhost 2>$null
            if ($healthCheck -like "*alive*") {
                Write-Log "‚úÖ MySQL pr√™t" "Green"
                break
            }
        } catch {}
        
        if ($waited -ge $maxWait) {
            Write-Log "‚ö†Ô∏è  Timeout MySQL - continuons quand m√™me" "Yellow"
            break
        }
    } while ($true)
    
    # D√©marrer l'application
    docker-compose -f docker-compose.prod.yml up -d app
    Write-Log "‚úÖ Application d√©marr√©e" "Green"
    
} catch {
    Write-Log "‚ùå Erreur lors du d√©marrage" "Red"
    docker-compose -f docker-compose.prod.yml logs
    exit 1
}

# Migration de la base de donn√©es
Write-Log "üóÑÔ∏è  Application des migrations..." "Yellow"
Start-Sleep -Seconds 10  # Laisser le temps √† l'app de d√©marrer

try {
    docker-compose -f docker-compose.prod.yml exec -T app npx prisma migrate deploy
    Write-Log "‚úÖ Migrations appliqu√©es" "Green"
} catch {
    Write-Log "‚ö†Ô∏è  Erreur migrations - retry..." "Yellow"
    Start-Sleep -Seconds 5
    try {
        docker-compose -f docker-compose.prod.yml exec -T app npx prisma migrate deploy
        Write-Log "‚úÖ Migrations appliqu√©es (retry)" "Green"
    } catch {
        Write-Log "‚ùå √âchec des migrations" "Red"
    }
}

# Test de sant√©
Write-Log "üè• Test de sant√© de l'application..." "Yellow"
$maxRetries = 10
$retryCount = 0

do {
    Start-Sleep -Seconds 3
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Log "‚úÖ Application op√©rationnelle!" "Green"
            break
        }
    } catch {
        $retryCount++
        Write-Log "‚è≥ Tentative $retryCount/$maxRetries..." "Yellow"
    }
} while ($retryCount -lt $maxRetries)

if ($retryCount -ge $maxRetries) {
    Write-Log "‚ö†Ô∏è  Health check √©chou√© - v√©rifiez manuellement" "Yellow"
}

# Statut final
Write-Log "üìä Statut du d√©ploiement:" "Cyan"
Write-Host ""

# Containers
Write-Host "üê≥ Containers:" -ForegroundColor Cyan
docker-compose -f docker-compose.prod.yml ps

Write-Host ""
Write-Host "üåê URLs d'acc√®s:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Application: http://localhost:3000" -ForegroundColor White
Write-Host "   ‚Ä¢ Interface:   http://localhost:3000/app.html" -ForegroundColor White  
Write-Host "   ‚Ä¢ API Health:  http://localhost:3000/api/health" -ForegroundColor White

Write-Host ""
Write-Host "üìö Commandes utiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Logs:     docker-compose -f docker-compose.prod.yml logs -f" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Restart:  docker-compose -f docker-compose.prod.yml restart" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Stop:     docker-compose -f docker-compose.prod.yml down" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Backup:   docker-compose -f docker-compose.prod.yml --profile backup run --rm backup" -ForegroundColor Gray

Write-Host ""
Write-Log "üéâ DEPLOIEMENT PRODUCTION TERMINE!" "Green"
Write-Log "Application accessible sur http://localhost:3000" "Cyan"