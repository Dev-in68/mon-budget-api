# ==============================================
# DOCKER COMPOSE - PRODUCTION
# Mon Budget API - Configuration sécurisée
# ==============================================

version: '3.8'

services:
  # Application Node.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: budget-api-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://budget_user:${MYSQL_PASSWORD}@db:3306/budget_production
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES=15m
      - JWT_REFRESH_EXPIRES=7d
      - BCRYPT_SALT_ROUNDS=12
      - PORT=3000
    ports:
      - "3001:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - budget-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données MySQL
  db:
    image: mysql:8.0
    container_name: budget-mysql-prod
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=budget_production
      - MYSQL_USER=budget_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - mysql-config:/etc/mysql/conf.d
      - ./backup:/backup
      - ./scripts/mysql-secure.cnf:/etc/mysql/conf.d/secure.cnf:ro
    ports:
      - "127.0.0.1:3306:3306"  # Bind uniquement sur localhost
    networks:
      - budget-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - seccomp:unconfined
    command: >
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
      --max-connections=100
      --innodb-buffer-pool-size=256M

  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: budget-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-simple.conf:/etc/nginx/nginx.conf:ro
      - ./public:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - budget-network
    security_opt:
      - no-new-privileges:true

  # Service de backup automatique
  backup:
    image: mysql:8.0
    container_name: budget-backup-prod
    restart: "no"
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - budget-network
    depends_on:
      - db
    command: ["sh", "/backup.sh"]
    profiles:
      - backup

  # Monitoring avec Watchtower (mises à jour automatiques)
  watchtower:
    image: containrrr/watchtower
    container_name: budget-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # 24h
      - WATCHTOWER_INCLUDE_STOPPED=true
    networks:
      - budget-network
    profiles:
      - monitoring

networks:
  budget-network:
    driver: bridge
    name: budget-prod-network

volumes:
  mysql-data:
    driver: local
    name: budget-mysql-data
  mysql-config:
    driver: local
    name: budget-mysql-config
  app-logs:
    driver: local
    name: budget-app-logs
  nginx-logs:
    driver: local
    name: budget-nginx-logs